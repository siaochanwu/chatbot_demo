#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('chatdemo:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

//這邊的Server要用有socket.io來建立 (加入Socket.io)
//var server = http.createServer(app);
const server = http.Server(app);
const io = require('socket.io')(server);

//觸發連線(開網頁)
io.on('connection', (socket) => {
  console.log('Hello! 有新的聊天觀眾');
  // 接收來自前端的 sendMessage 事件
  // 然後回送 allMessage 事件
  socket.on("sendMessage", function (message) {
    console.log("前端來的Msg=", message)
    // 當收到事件的時候 也發送一個 "allMessage" 事件給所有的連線用戶
    io.emit("allMessage", "歡迎"+message.name +"! 聊天內容:"+message.msg)
  })
  //觸發離線事件(關網頁)
  socket.on('disconnect', () => {
    console.log('再見使用者');
  });
});
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

console.log('port:', port)
/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
